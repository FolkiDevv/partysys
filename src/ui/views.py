from __future__ import annotations

import discord
from discord import Interaction
from discord.ui import View
from sentry_sdk import metrics

from src import utils
from src.models import TCBans
from src.services import errors

from .base import BaseView
from .embeds import InfoEmbed, SuccessEmbed


class KickInterface(BaseView):
    def __init__(
        self,
        bot: utils.BotABC,
        users: list[discord.Member],
        owner: discord.Member,
    ):
        super().__init__(bot)

        self.select_user = discord.ui.Select(
            custom_id="kick:select", placeholder="–ö–æ–≥–æ –≤—ã–≥–æ–Ω—è–µ–º?"
        )
        for user in users:
            if user.id != owner.id:
                self.select_user.add_option(
                    label=user.display_name, value=str(user.id)
                )
        if not len(self.select_user.options):
            self.select_user.disabled = True
            self.select_user.placeholder = "–ö—Ä–æ–º–µ –≤–∞—Å –≤ –∫–∞–Ω–∞–ª–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç :("

        self.add_item(self.select_user)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        await super().interaction_check(interaction)

        selected_user = interaction.guild.get_member(
            int(self.select_user.values[0])
        )
        await self.temp_voice.kick(member=selected_user)
        await interaction.response.edit_message(
            view=None,
            embed=SuccessEmbed(
                f"{selected_user.mention} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ "
                f"–≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
            ),
        )

        metrics.incr(
            "temp_channel_user_kick",
            1,
            tags={"server": interaction.guild_id},
        )

        return True


class TransferOwnerInterface(BaseView):
    def __init__(self, bot: utils.BotABC):
        super().__init__(bot)

    @discord.ui.select(
        cls=discord.ui.UserSelect,
        custom_id="transfer_owner:select",
        placeholder="–ö–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?",
    )
    async def select_callback(
        self, interaction: discord.Interaction, select: discord.ui.UserSelect
    ):
        await super().interaction_check(interaction)

        await self.temp_voice.change_owner(select.values[0])

        await interaction.response.edit_message(
            embed=SuccessEmbed(
                f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                f"{select.values[0].mention}.\n"
                f"*–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞ –Ω–∞ "
                f"—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É*"
            ),
            view=None,
        )
        await self.temp_voice.channel.send(
            content=select.values[0].mention,
            embed=InfoEmbed(
                "–ü–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º",
                f"{select.values[0].mention} —Ç–µ–ø–µ—Ä—å"
                f" —É–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º.",
            ),
        )

        metrics.incr(
            "temp_channel_change_owner",
            1,
            tags={"server": interaction.guild_id},
        )

        return True


class BanInterface(BaseView):
    def __init__(self, bot: utils.BotABC):
        super().__init__(bot)

    @discord.ui.select(
        cls=discord.ui.UserSelect,
        custom_id="ban:select",
        placeholder="–ö–æ–≥–æ –±–∞–Ω–∏–º?",
    )
    async def select_callback(
        self, interaction: discord.Interaction, select: discord.ui.UserSelect
    ):
        await super().interaction_check(interaction)

        await self.temp_voice.ban(select.values[0])

        await interaction.response.edit_message(
            embed=SuccessEmbed(
                f"{select.values[0].mention} —Ç–µ–ø–µ—Ä—å –Ω–µ —Å–º–æ–∂–µ—Ç "
                f"–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∏ –∫ "
                f"–±—É–¥—É—â–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏."
            ),
            view=None,
        )

        metrics.incr(
            "temp_channel_user_ban",
            1,
            tags={"server": interaction.guild_id},
        )

        return True


class UnbanInterface(BaseView):
    def __init__(
        self,
        bot: utils.BotABC,
        guild: discord.Guild,
        ban_list_raw: list[TCBans],
    ):
        super().__init__(bot)

        self.select_user = discord.ui.Select(
            custom_id="unban:select", placeholder="–ö–æ–º—É –¥–∞—Ä—É–µ–º –ø–æ–º–∏–ª–æ–≤–∞–Ω–∏–µ?"
        )
        for ban in ban_list_raw:
            user = guild.get_member(ban.dis_banned_id)
            if user:
                self.select_user.add_option(
                    label=f"{user.display_name} (ID: {user.id})", value=ban.id
                )
            else:
                self.select_user.add_option(
                    label=f"ID: {ban.dis_banned_id}", value=ban.id
                )

        self.add_item(self.select_user)

    async def interaction_check(self, interaction: discord.Interaction):
        await super().interaction_check(interaction)

        unbanned = await self.temp_voice.unban(int(self.select_user.values[0]))
        if unbanned == 1:
            await interaction.response.edit_message(
                embed=SuccessEmbed(f"–ë–∞–Ω #{self.select_user.values[0]} —Å–Ω—è—Ç."),
                view=None,
            )
        elif unbanned:
            await interaction.response.edit_message(
                embed=SuccessEmbed(f"<@{unbanned}> –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω."),
                view=None,
            )
        else:
            raise errors.PartySysException(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n*–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "
                "–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞."
            )

        metrics.incr(
            "temp_channel_user_unban",
            1,
            tags={"server": interaction.guild_id},
        )

        return True


class TakeAccessInterface(BaseView):
    def __init__(self, bot: utils.BotABC):
        super().__init__(bot)

    @discord.ui.select(
        cls=discord.ui.UserSelect,
        max_values=10,
        custom_id="take_access:select",
        placeholder="–ö–æ–º—É –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è?",
    )
    async def select_callback(
        self, interaction: discord.Interaction, select: discord.ui.UserSelect
    ):
        await super().interaction_check(interaction)

        mentions = []
        for selected_member in select.values:
            await self.temp_voice.take_access(selected_member)
            mentions.append(selected_member.mention)

        await interaction.response.edit_message(
            embed=SuccessEmbed(
                "–î–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—ã–ª –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∏ "
                "–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:\n"
                + "\n".join(mentions)
                + "\n\n*P.s. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —Ç–µ–∫—É—â–µ–º—É –∫–∞–Ω–∞–ª—É, "
                '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ó–∞–±–∞–Ω–∏—Ç—å", '
                "—á—Ç–æ–±—ã –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∏ –∫ "
                "–±—É–¥—É—â–µ–º –≤–∞—à–∏–º –∫–∞–Ω–∞–ª–∞–º.*"
            ),
            view=None,
        )

        metrics.incr(
            "temp_channel_user_restrict_access",
            1,
            tags={"server": interaction.guild_id},
        )

        return True


class GetAccessInterface(BaseView):
    def __init__(self, bot: utils.BotABC):
        super().__init__(bot)

    @discord.ui.select(
        cls=discord.ui.UserSelect,
        max_values=10,
        custom_id="get_access:select",
        placeholder="–ö–æ–º—É —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è?",
    )
    async def select_callback(
        self, interaction: discord.Interaction, select: discord.ui.UserSelect
    ):
        await super().interaction_check(interaction)

        mentions = []
        for selected_member in select.values:
            await self.temp_voice.get_access(selected_member)
            mentions.append(selected_member.mention)

        await interaction.response.edit_message(
            embed=SuccessEmbed(
                "–°–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å/–∑–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª "
                "–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:\n"
                + "\n".join(mentions)
            ),
            view=None,
        )

        metrics.incr(
            "temp_channel_user_get_access",
            1,
            tags={"server": interaction.guild_id},
        )

        return True


class PrivacyInterface(BaseView):
    def __init__(self, bot: utils.BotABC, privacy: utils.Privacy):
        super().__init__(bot)

        self.select = discord.ui.Select(
            options=[
                discord.SelectOption(
                    label="–ü—É–±–ª–∏—á–Ω—ã–π",
                    value="0",
                    emoji="üîì",
                    default=privacy == utils.Privacy.PUBLIC,
                    description="–õ—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π —Å–º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É "
                    "–∫–∞–Ω–∞–ª—É.",
                ),
                discord.SelectOption(
                    label="–ó–∞–∫—Ä—ã—Ç—ã–π",
                    value="1",
                    emoji="üîí",
                    default=privacy == utils.Privacy.PRIVATE,
                    description="–í—Å–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à –∫–∞–Ω–∞–ª, –Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è "
                    "–º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º.",
                ),
                discord.SelectOption(
                    label="–°–∫—Ä—ã—Ç—ã–π",
                    value="2",
                    emoji="üîê",
                    default=privacy == utils.Privacy.HIDDEN,
                    description='–ê–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Ä–µ–∂–∏–º—É "–ó–∞–∫—Ä—ã—Ç—ã–π", –æ–¥–Ω–∞–∫–æ '
                    "–ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –Ω–µ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
                ),
            ],
            custom_id="privacy:select",
        )
        self.add_item(self.select)

    async def interaction_check(self, interaction: Interaction, /) -> bool:
        await super().interaction_check(interaction)

        await self.temp_voice.change_privacy(
            utils.Privacy(self.select.values[0])
        )
        await interaction.response.edit_message(
            embed=SuccessEmbed(
                f'–†–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: '
                f'{("üîì –ü—É–±–ª–∏—á–Ω—ã–π", "üîí –ó–∞–∫—Ä—ã—Ç—ã–π", "üîê –°–∫—Ä—ã—Ç—ã–π")[int(self.select.values[0])]}'  # noqa: E501]}'
            ),
            view=None,
        )

        metrics.incr(
            "temp_channel_privacy_changed",
            1,
            tags={"server": interaction.guild_id},
        )

        if self.select.values[0] != utils.Privacy.PUBLIC:
            # Try to delete active adv if privacy changed to closed
            await self.temp_voice.adv.delete()
        return True


class JoinInterface(View):
    def __init__(self, invite_url: str, disabled: bool):
        super().__init__(timeout=None)
        self.add_item(
            discord.ui.Button(
                style=discord.ButtonStyle.url,
                url=invite_url,
                disabled=disabled,
                label="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
            )
        )
